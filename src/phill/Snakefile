import importlib.resources
import itertools
import os
from glob import iglob
from pathlib import Path
from socket import gethostname

import snek5000
from phill.output import OutputPhill as Output
from snek5000.util import now
from snek5000.util.archive import tar_name, archive, clean_simul


# Case name
CASE = "phill"
CONFIG = Output.get_configfile()
ROOT = Output.get_root()
NEK_SOURCE_ROOT = snek5000.source_root()

snek5000.ensure_env()

configfile: CONFIG

# Necessary to pass configuration to other Snakemake modules
config.update(
    {
        "CASE": CASE,
        "file": CONFIG,
        "includes": " ".join(Output().fortran_inc_flags),
        "objects" : " ".join(Output().makefile_usr_obj),
    }
)

if os.getenv("SNEK_DEBUG"):
    config["CFLAGS"] += " -O0 -g"
    config["FFLAGS"] += " -O0 -g -ffpe-trap=invalid,zero,overflow,underflow -Wall"


rule test:
    shell: 'echo $NEK_SOURCE_ROOT $PATH'


# default rule
rule all:
    input:
        'nek5000'

# shorthand for mesh
rule mesh:
    input: f"{CASE}.re2", f"{CASE}.ma2"

# compiler and run rules
# ======================
module compiler:
    snakefile: snek5000.get_asset('compiler.smk')
    config: config

use rule * from compiler

# I/O rules
# =========
module io:
    snakefile: snek5000.get_asset('io.smk')
    config: config

use rule * from io

# internal rules
# ==============
module internal:
    snakefile: snek5000.get_asset('internal.smk')
    config: config

use rule * from internal as internal_*
